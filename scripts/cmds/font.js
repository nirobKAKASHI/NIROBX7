module.exports = {
  config: {
    name: "font",
    version: "2.2",
    author: "NIROB üñ§",
    countDown: 5,
    role: 1, // VIP role required (change if your VIP role id is different)
    shortDescription: "Stylish font converter",
    longDescription: "Convert your text into various stylish fonts",
    category: "text",
    guide: {
      en: "{pn} list ‚Äî Show all font styles\n{pn} [number] [text] ‚Äî Convert your text with selected font"
    }
  },

  onStart: async function ({ event, message, args, usersData }) {
    // Check VIP access: role 1 means VIP users only
    // Adjust this check depending on your framework for roles
    if (this.config.role > 0) {
      // Suppose your usersData has roles: usersData[event.senderID].role
      const userRole = usersData?.[event.senderID]?.role || 0;
      if (userRole < this.config.role) {
        return message.reply("‚ùå This command is only available for VIP users.");
      }
    }

    const fonts = [
      { name: "ùìíùìæùìªùìºùì≤ùìøùìÆ", converter: str => str.replace(/[A-Za-z]/g, c => {
          const base = c === c.toUpperCase() ? 0x1D4D0 : 0x1D4EA;
          return String.fromCodePoint(base + c.toLowerCase().charCodeAt(0) - 97);
      }) },
      { name: "ùêÅùê®ùê•ùêù", converter: str => str.replace(/[A-Za-z]/g, c => {
          const base = c === c.toUpperCase() ? 0x1D400 : 0x1D41A;
          return String.fromCodePoint(base + c.toLowerCase().charCodeAt(0) - 97);
      }) },
      { name: "ùòêùòµùò¢ùò≠ùò™ùò§", converter: str => str.replace(/[A-Za-z]/g, c => {
          const base = c === c.toUpperCase() ? 0x1D434 : 0x1D44E;
          return String.fromCodePoint(base + c.toLowerCase().charCodeAt(0) - 97);
      }) },
      { name: "ùôàùô§ùô£ùô§ùô®ùô•ùôñùôòùôö", converter: str => str.replace(/[A-Za-z]/g, c => {
          const base = 0x1D670;
          return String.fromCodePoint(base + c.toUpperCase().charCodeAt(0) - 65);
      }) },
      { name: "ùô±ùöòùöïùöç ùôºùöòùöóùöò", converter: str => str.replace(/[A-Za-z]/g, c => {
          const base = 0x1D6A8;
          return String.fromCodePoint(base + c.toUpperCase().charCodeAt(0) - 65);
      }) },
      { name: "üÖëüÖûüÖß", converter: str => str.replace(/[A-Za-z]/g, c => {
          return "üÖêüÖëüÖíüÖìüÖîüÖïüÖñüÖóüÖòüÖôüÖöüÖõüÖúüÖùüÖûüÖüüÖ†üÖ°üÖ¢üÖ£üÖ§üÖ•üÖ¶üÖßüÖ®üÖ©"[c.toUpperCase().charCodeAt(0) - 65];
      }) },
      { name: "·ëïOO·í™", converter: str => str.split('').map(c => {
          const map = { N: '·ëé', I: 'I', R: '·ñá', O: 'O', B: '·ó∑' };
          return map[c.toUpperCase()] || c;
      }).join('') },
      { name: "‚ìí‚ìò‚ì°‚ìí‚ìõ‚ìî", converter: str => str.replace(/[A-Za-z]/g, c => {
          return String.fromCodePoint(0x24B6 + c.toUpperCase().charCodeAt(0) - 65);
      }) },
      { name: "üÑ±üÑæüÖáüÑ¥üÑ≥", converter: str => str.replace(/[A-Za-z]/g, c => {
          return String.fromCodePoint(0x1F130 + c.toUpperCase().charCodeAt(0) - 65);
      }) },
      { name: "·¥õ…™…¥ è", converter: str => str.replace(/[A-Za-z]/g, c => {
          const tiny = {
            a:'·¥Ä', b:' ô', c:'·¥Ñ', d:'·¥Ö', e:'·¥á', f:'“ì', g:'…¢',
            h:' ú', i:'…™', j:'·¥ä', k:'·¥ã', l:' ü', m:'·¥ç', n:'…¥',
            o:'·¥è', p:'·¥ò', q:'«´', r:' Ä', s:'s', t:'·¥õ', u:'·¥ú',
            v:'·¥†', w:'·¥°', x:'x', y:' è', z:'·¥¢'
          };
          return [...str].map(c => tiny[c.toLowerCase()] || c).join('');
      }) },
      { name: "Ôº≠ÔºØÔºÆÔºØ„ÄÄÔº¶ÔºµÔº¨Ôº¨", converter: str => str.replace(/[A-Za-z]/g, c => {
          return String.fromCharCode(c.charCodeAt(0) + 0xFEE0);
      }) },
      { name: "üÖ£üÖòüÖ£üÖõüÖî", converter: str => str.toUpperCase().split('').reverse().join('') },
      { name: "ùîäùî¨ùî±ùî•ùî¶ùî†", converter: str => str.replace(/[A-Za-z]/g, c => {
          const base = c === c.toUpperCase() ? 0x1D504 : 0x1D51E;
          return String.fromCodePoint(base + c.toLowerCase().charCodeAt(0) - 97);
      }) },
      { name: "ùñòùñàùñÜùñóùñû", converter: str => str.replace(/[A-Za-z]/g, c => {
          const scary = {
            A:'ùñÜ', B:'ùñá', C:'ùñà', D:'ùñâ', E:'ùñä', F:'ùñã', G:'ùñå', H:'ùñç',
            I:'ùñé', J:'ùñè', K:'ùñê', L:'ùñë', M:'ùñí', N:'ùñì', O:'ùñî', P:'ùñï',
            Q:'ùññ', R:'ùñó', S:'ùñò', T:'ùñô', U:'ùñö', V:'ùñõ', W:'ùñú', X:'ùñù',
            Y:'ùñû', Z:'ùñü'
          };
          return [...str].map(c => scary[c.toUpperCase()] || c).join('');
      }) },
      { name: "…π«ù å«ù…πs«ùd", converter: str => str.split('').map(c => {
          const flip = {
            a:'…ê', b:'q', c:'…î', d:'p', e:'«ù', f:'…ü', g:'∆É', h:'…•',
            i:'·¥â', j:'…æ', k:' û', l:' É', m:'…Ø', n:'u', o:'o', p:'d',
            q:'b', r:'…π', s:'s', t:' á', u:'n', v:' å', w:' ç', x:'x',
            y:' é', z:'z', '.':'Àô', ',':'\'', '\'':',', '"':',,',
            '_':'‚Äæ', '?':'¬ø', '!':'¬°', '[':']', '(':')', '{':'}',
            ']':'[', ')':'(', '}':'{'
          };
          return flip[c.toLowerCase()] || c;
      }).reverse().join('') }
    ];

    if (!args[0]) {
      return message.reply("‚ùå Please provide a font number or type `list` to see all fonts.\nExample:\nfont list\nfont 3 Hello");
    }

    if (args[0].toLowerCase() === "list") {
      let listMsg = "üñãÔ∏è Available Fonts:\n\n";
      fonts.forEach((f, i) => {
        listMsg += `${i+1}. ${f.name}\n`;
      });
      return message.reply(listMsg);
    }

    const fontIndex = parseInt(args[0], 10);
    if (!fontIndex || fontIndex < 1 || fontIndex > fonts.length) {
      return message.reply("‚ùå Invalid font number. Use `font list` to see available fonts.");
    }

    // If no text given, default to "NIROB"
    const textToConvert = args.slice(1).join(' ') || "NIROB";

    const converted = fonts[fontIndex - 1].converter(textToConvert);
    return message.reply(converted);
  }
};
